---
import type { ImageMetadata } from 'astro'
import { Image, getImage } from 'astro:assets'

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/gallery/beauty/*')
const imagePaths = Object.keys(images).filter(path => 
  path.startsWith('/src/assets/gallery/beauty/')
)

function getGridPosition(metadata: ImageMetadata) {
  const ratio = metadata.width / metadata.height;
  const SQUARE_THRESHOLD = 0.4;

  if (Math.abs(ratio - 1) <= SQUARE_THRESHOLD) {
    return {
      columns: 1,
      rows: 1
    };
  }
  
  if (ratio > 1 + SQUARE_THRESHOLD) {
    return {
      columns: 2,
      rows: 1.5
    };
  }
  
  return {
    columns: 1,
    rows: 2
  };
}

async function getImageData(imagePath: string) {
  const imageModule = await images[imagePath]()
  const metadata = imageModule.default
  const dimensions = getGridPosition(metadata)
  const optimized = await getImage({
    src: metadata,
    width: dimensions.columns * 800,
    format: 'webp',
  })
  return { metadata, dimensions, optimized }
}
---

<div class="gallery-wrapper">
  <div class="gallery-container">
    {
      imagePaths.map(async (imagePath, index) => {
        const { metadata, dimensions, optimized } = await getImageData(imagePath)
        return (
          <div 
            class="gallery-item"
            style={`--cols: ${dimensions.columns}; --rows: ${dimensions.rows};`}
            data-index={index}
          >
            <Image
              src={metadata}
              width={optimized.options.width}
              height={Math.round(optimized.options.width * (metadata.height / metadata.width))}
              alt={`Gallery image ${imagePath.split('/').pop()}`}
              class="gallery-image"
            />
          </div>
        )
      })
    }
  </div>
</div>

<style>
  .gallery-wrapper {
    width: 100%;
    max-width: 1920px;
    margin: 0 auto;
    padding: 1rem;
  }

  .gallery-container {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    grid-auto-rows: 300px;
    gap: 1rem;
  }

  .gallery-item {
    grid-column: span var(--cols);
    grid-row: span var(--rows);
    cursor: pointer;
    overflow: hidden;
    border-radius: 0.5rem;
    transition: transform 0.2s ease;
  }

  .gallery-item:hover {
    transform: scale(1.02);
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 50% 50%;
  }

  @media (max-width: 1200px) {
    .gallery-container {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  @media (max-width: 768px) {
    .gallery-container {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const images = document.querySelectorAll('.gallery-image');
  
  images.forEach(img => {
    // Set center positioning for all images
    img.style.objectPosition = '50% 50%';
  });
});
</script>