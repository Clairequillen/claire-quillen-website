---
import BaseHead from '@/components/BaseHead.astro'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import RunwayGallery from '@/components/RunwayGallery.astro'
import BeautyGallery from '@/components/BeautyGallery.astro'
import SFXGallery from '@/components/SFXGallery.astro'
import BottomMatter from '@/components/BottomMatter.astro'
import ExternalScripts from '@/components/ExternalScripts.astro'

let title = 'Claire Quillen'
let description =
  'Portfolio of beauty, runway, and special effects (SFX) work for Brooklyn-based makeup artist Claire Quillen.'
---
<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={title}
      description={description}
      author={'Claire Quillen'}
      og={'og-image.jpg'}
    />
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      
      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }
      
      window.localStorage.setItem('theme', theme);
    </script>
  </head>

  <body class="is-preload">
    <!-- Theme Toggle -->
    <button id="theme-toggle" type="button" class="theme-toggle">
      <svg class="sun" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
      </svg>
      <svg class="moon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
      </svg>
    </button>
    
    <Header title={title} />
    
    <!-- Gallery Navigation -->
    <nav class="gallery-nav">
      <a href="#" class="gallery-link" data-gallery="beauty">Beauty</a>
      <a href="#" class="gallery-link" data-gallery="runway">Runway</a>
      <a href="#" class="gallery-link" data-gallery="sfx">SFX</a>
    </nav>
    
    <div id="wrapper">
      <div id="runway-gallery" class="gallery hidden">
        <RunwayGallery />
      </div>
      <div id="beauty-gallery" class="gallery hidden">
        <BeautyGallery />
      </div>
      <div id="sfx-gallery" class="gallery hidden">
        <SFXGallery />
      </div>
    </div>

    <!-- Image Viewer -->
    <div class="image-viewer">
      <button class="viewer-close" aria-label="Close viewer">×</button>
      <button class="viewer-prev" aria-label="Previous image">‹</button>
      <button class="viewer-next" aria-label="Next image">›</button>
      <div class="viewer-content"></div>
    </div>

    <Footer title={title} description={description} />
    <BottomMatter />
    <ExternalScripts />

    <style>
      :root {
        --background-light: #ffffff;
        --text-light: #000000;
        --background-dark: #1a1a1a;
        --text-dark: #ffffff;
      }

      body {
        background-color: var(--background-light);
        color: var(--text-light);
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      html.dark body {
        background-color: var(--background-dark);
        color: var(--text-dark);
      }

      .hidden {
        display: none;
      }

      .gallery-nav {
        display: flex;
        justify-content: center;
        gap: 2rem;
        padding: 1rem;
        margin: 1rem 0;
      }

      .gallery-link {
        color: inherit;
        text-decoration: none;
        font-size: 1.2rem;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        transition: all 0.2s ease;
      }

      .gallery-link:hover {
        background: rgba(128, 128, 128, 0.1);
      }

      /* Theme Toggle */
      .theme-toggle {
        position: fixed;
        top: 1em;
        right: 1em;
        width: 5vh;
        height: 5vh;
        border-radius: 50%;
        padding: 0;
        z-index: 100;
        background: none;
        border: none;
        cursor: pointer;
        color: inherit;
      }

      .theme-toggle svg {
        position: fixed; 
        top: 1.75em;
        right: 1.75em;
        width: 3vh;
        height: 3vh;
        stroke: currentColor;
      }

      .theme-toggle .moon {
        display: none;
      }

      html.dark .theme-toggle .moon {
        position: fixed;
        top: 1.75em;
        right: 1.75em;
        display: flex;
      }

      html.dark .theme-toggle .sun {
        display: none;
      }

      /* Image Viewer */
      .image-viewer {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: none;
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1000;
      }

      .image-viewer.active {
        display: flex;
        opacity: 1;
      }

      .viewer-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        max-width: 90vw;
        max-height: 90vh;
      }

      .viewer-content img {
        max-width: 100%;
        max-height: 90vh;
        object-fit: contain;
      }

      .viewer-close,
      .viewer-prev,
      .viewer-next {
        position: absolute;
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 1rem;
        font-size: 2rem;
        z-index: 1001;
        transition: opacity 0.2s ease;
      }

      .viewer-close {
        top: 1rem;
        right: 1rem;
      }

      .viewer-prev {
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
      }

      .viewer-next {
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
      }

      .viewer-close:hover,
      .viewer-prev:hover,
      .viewer-next:hover {
        opacity: 0.7;
      }

      @media (max-width: 1200px) {
        .gallery-container {
          grid-template-columns: repeat(4, 1fr);
        }
      }

      @media (max-width: 768px) {
        .gallery-container {
          grid-template-columns: repeat(2, 1fr);
        }
      }

      /* Add these to your style section */
      :root {
        --background-light: #ffffff;
        --text-light: #000000;
        --background-dark: #1a1a1a;
        --text-dark: #ffffff;
        --border-light: rgba(0, 0, 0, 0.1);
        --border-dark: rgba(255, 255, 255, 0.1);
        --header-text-light: #333333;  /* For the header text */
        --header-text-dark: #ffffff;   /* For the header text in dark mode */
        --header-bg-light: #ffffff;  /* For the header background */
        --header-bg-dark: #333333;   /* For the header background in dark mode */
      }

      /* Header styles */
      /* Header fixes */

      /* Bottom matter fixes */
      #bottom-matter {
        color: var(--text-light);
        transition: color 0.3s ease;
      }

      html.dark #bottom-matter {
        color: var(--text-dark);
      }

      /* Make sure all text elements in bottom matter are visible */
      #bottom-matter h1,
      #bottom-matter h2,
      #bottom-matter h3,
      #bottom-matter p,
      #bottom-matter span,
      #bottom-matter a {
        color: inherit;
      }

      /* Make sure header content is visible */
      header h1,
      header p,
      header span {
        color: inherit;
      }

      /* Gallery navigation */
      .gallery-link {
        color: var(--text-light);
      }

      html.dark .gallery-link {
        color: var(--text-dark);
      }

      .gallery-link:hover {
        background: rgba(128, 128, 128, 0.1);  /* Neutral hover for both modes */
      }
    </style>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Theme toggle
        document.getElementById('theme-toggle')?.addEventListener('click', () => {
          document.documentElement.classList.toggle('dark');
          localStorage.setItem(
            'theme',
            document.documentElement.classList.contains('dark') ? 'dark' : 'light'
          );
        });

        // Gallery functionality
        let currentIndex = 0;
        let currentGalleryItems = [];
        const viewer = document.querySelector('.image-viewer');
        const viewerContent = viewer?.querySelector('.viewer-content');

        function updateCurrentGalleryItems() {
          const activeGallery = document.querySelector('.gallery:not(.hidden)');
          if (activeGallery) {
            currentGalleryItems = Array.from(activeGallery.querySelectorAll('.gallery-item'));
          }
        }

        function showImage(index) {
          if (!viewerContent) return;
          
          const galleryItem = currentGalleryItems[index];
          if (!galleryItem) return;

          const img = galleryItem.querySelector('img');
          if (!img) return;

          const viewerImg = document.createElement('img');
          viewerImg.src = img.src;
          viewerImg.alt = img.alt;
          
          viewerContent.innerHTML = '';
          viewerContent.appendChild(viewerImg);
        }

        function openViewer(index) {
          updateCurrentGalleryItems();
          currentIndex = index;
          viewer?.classList.add('active');
          document.body.style.overflow = 'hidden';
          showImage(currentIndex);
        }

        function closeViewer() {
          viewer?.classList.remove('active');
          document.body.style.overflow = '';
        }

        function showNext() {
          currentIndex = (currentIndex + 1) % currentGalleryItems.length;
          showImage(currentIndex);
        }

        function showPrev() {
          currentIndex = (currentIndex - 1 + currentGalleryItems.length) % currentGalleryItems.length;
          showImage(currentIndex);
        }

        // Gallery switching
        const galleryLinks = document.querySelectorAll('.gallery-link');
        galleryLinks.forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const galleryId = `${e.target.dataset.gallery}-gallery`;
            
            document.querySelectorAll('.gallery').forEach(gallery => {
              gallery.classList.add('hidden');
            });
            
            document.getElementById(galleryId)?.classList.remove('hidden');
            closeViewer();
            currentIndex = 0;
          });
        });

        // Gallery item clicks
        document.addEventListener('click', (e) => {
          const galleryItem = e.target.closest('.gallery-item');
          if (galleryItem && !viewer?.classList.contains('active')) {
            const gallery = galleryItem.closest('.gallery');
            if (!gallery.classList.contains('hidden')) {
              updateCurrentGalleryItems();
              const index = currentGalleryItems.indexOf(galleryItem);
              if (index !== -1) {
                openViewer(index);
              }
            }
          }
        });

        // Viewer controls
        viewer?.querySelector('.viewer-close')?.addEventListener('click', closeViewer);
        viewer?.querySelector('.viewer-next')?.addEventListener('click', showNext);
        viewer?.querySelector('.viewer-prev')?.addEventListener('click', showPrev);

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
          if (!viewer?.classList.contains('active')) return;
          
          switch (e.key) {
            case 'Escape':
              closeViewer();
              break;
            case 'ArrowRight':
              showNext();
              break;
            case 'ArrowLeft':
              showPrev();
              break;
          }
        });

        // Background click to close
        viewer?.addEventListener('click', (e) => {
          if (e.target === viewer) {
            closeViewer();
          }
        });

        // Initialize with beauty gallery
        document.getElementById('beauty-gallery')?.classList.remove('hidden');
        updateCurrentGalleryItems();
      });
    </script>
  </body>
</html>