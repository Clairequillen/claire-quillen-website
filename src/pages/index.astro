---
import BaseHead from '@/components/BaseHead.astro'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import RunwayGallery from '@/components/RunwayGallery.astro'
import BeautyGallery from '@/components/BeautyGallery.astro'
import SFXGallery from '@/components/SFXGallery.astro'
import BottomMatter from '@/components/BottomMatter.astro'
import ExternalScripts from '@/components/ExternalScripts.astro'

let title = 'Claire Quillen'
let description =
  'Portfolio of beauty, runway, and special effects (SFX) work for Brooklyn-based makeup artist Claire Quillen.'
---
<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={title}
      description={description}
      author={'Claire Quillen'}
      og={'og-image.jpg'}
    />
    <script is:inline>
    // Function to set the theme based on system preference
    function setTheme() {
      const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      if (isDarkMode) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    }

    // Set initial theme
    setTheme();

    // Listen for theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addListener(setTheme);
</script>
    </script>
  </head>

  <body class="is-preload">
    <!-- Theme Toggle -->
    <!-- 
    <button id="theme-toggle" type="button" class="theme-toggle">
      <svg class="sun" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
      </svg>
      <svg class="moon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
      </svg>
    </button>
    -->
    
    <Header title={title} />
    
    <!-- Gallery Navigation -->
    <nav class="gallery-nav">
      <a href="#" class="gallery-link" data-gallery="beauty">Beauty</a>
      <a href="#" class="gallery-link" data-gallery="runway">Runway</a>
      <a href="#" class="gallery-link" data-gallery="sfx">SFX</a>
    </nav>
    
    <div id="wrapper">
      <div id="runway-gallery" class="gallery hidden">
        <RunwayGallery />
      </div>
      <div id="beauty-gallery" class="gallery hidden">
        <BeautyGallery />
      </div>
      <div id="sfx-gallery" class="gallery hidden">
        <SFXGallery />
      </div>
    </div>

    <!-- Image Viewer -->
    <div class="image-viewer">
      <button class="viewer-close" aria-label="Close viewer">×</button>
      <button class="viewer-prev" aria-label="Previous image">‹</button>
      <button class="viewer-next" aria-label="Next image">›</button>
      <div class="viewer-content"></div>
    </div>

    <Footer title={title} description={description} />
    <BottomMatter />
    <ExternalScripts />

    <style>

    </style>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Gallery functionality
        let currentIndex = 0;
        let currentGalleryItems = [];
        const viewer = document.querySelector('.image-viewer');
        const viewerContent = viewer?.querySelector('.viewer-content');

        function updateCurrentGalleryItems() {
          const activeGallery = document.querySelector('.gallery:not(.hidden)');
          if (activeGallery) {
            currentGalleryItems = Array.from(activeGallery.querySelectorAll('.gallery-item'));
          }
        }

        function showImage(index) {
          if (!viewerContent) return;
          
          const galleryItem = currentGalleryItems[index];
          if (!galleryItem) return;

          const img = galleryItem.querySelector('img');
          if (!img) return;

          const viewerImg = document.createElement('img');
          viewerImg.src = img.src;
          viewerImg.alt = img.alt;
          
          viewerContent.innerHTML = '';
          viewerContent.appendChild(viewerImg);
        }

        function openViewer(index) {
          updateCurrentGalleryItems();
          currentIndex = index;
          viewer?.classList.add('active');
          document.body.style.overflow = 'hidden';
          showImage(currentIndex);
        }

        function closeViewer() {
          viewer?.classList.remove('active');
          document.body.style.overflow = '';
        }

        function showNext() {
          currentIndex = (currentIndex + 1) % currentGalleryItems.length;
          showImage(currentIndex);
        }

        function showPrev() {
          currentIndex = (currentIndex - 1 + currentGalleryItems.length) % currentGalleryItems.length;
          showImage(currentIndex);
        }

        // Gallery switching
        const galleryLinks = document.querySelectorAll('.gallery-link');
        galleryLinks.forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const galleryId = `${e.target.dataset.gallery}-gallery`;
            
            document.querySelectorAll('.gallery').forEach(gallery => {
              gallery.classList.add('hidden');
            });
            
            document.getElementById(galleryId)?.classList.remove('hidden');
            closeViewer();
            currentIndex = 0;
          });
        });

        // Gallery item clicks
        document.addEventListener('click', (e) => {
          const galleryItem = e.target.closest('.gallery-item');
          if (galleryItem && !viewer?.classList.contains('active')) {
            const gallery = galleryItem.closest('.gallery');
            if (!gallery.classList.contains('hidden')) {
              updateCurrentGalleryItems();
              const index = currentGalleryItems.indexOf(galleryItem);
              if (index !== -1) {
                openViewer(index);
              }
            }
          }
        });

        // Viewer controls
        viewer?.querySelector('.viewer-close')?.addEventListener('click', closeViewer);
        viewer?.querySelector('.viewer-next')?.addEventListener('click', showNext);
        viewer?.querySelector('.viewer-prev')?.addEventListener('click', showPrev);

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
          if (!viewer?.classList.contains('active')) return;
          
          switch (e.key) {
            case 'Escape':
              closeViewer();
              break;
            case 'ArrowRight':
              showNext();
              break;
            case 'ArrowLeft':
              showPrev();
              break;
          }
        });

        // Background click to close
        viewer?.addEventListener('click', (e) => {
          if (e.target === viewer) {
            closeViewer();
          }
        });

        // Initialize with beauty gallery
        document.getElementById('beauty-gallery')?.classList.remove('hidden');
        updateCurrentGalleryItems();

        // Add this inside your DOMContentLoaded event listener
        let touchStartX = 0;
        let touchEndX = 0;

        viewer?.addEventListener('touchstart', e => {
          touchStartX = e.changedTouches[0].screenX;
        });

        viewer?.addEventListener('touchend', e => {
          touchEndX = e.changedTouches[0].screenX;
          const diff = touchStartX - touchEndX;
          
          if (Math.abs(diff) > 50) { // minimum swipe distance
            if (diff > 0) {
              showNext();
            } else {
              showPrev();
            }
          }
        });

        viewer?.addEventListener('click', (e) => {
          if (e.target === viewer && !e.touches) { // Only close on desktop clicks
            closeViewer();
          }
        });

      });
    </script>
  </body>
</html>